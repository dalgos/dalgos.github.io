{"version":3,"sources":["webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/components/PostItem/index.tsx","webpack:///./src/pages/index.tsx"],"names":["Content","styled","div","children","query","render","data","className","title","site","siteMetadata","meta","Header","Nav","id","Footer","SEO","description","lang","keywords","detailsQuery","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","path","date","excerpt","to","Index","allMdx","edges","map","node","fields","frontmatter","PostItem","key","slug","recentPostQuery"],"mappings":"yVAUA,IAAMA,EAAUC,IAAOC,IAAV,KAIE,kBAAGC,EAAH,EAAGA,SAAH,OACb,gBAAC,cAAD,CACEC,MAAK,aASLC,OAAQ,SAAAC,GAAI,OACV,uBAAKC,UAAU,yBACb,gBAAC,IAAD,CACEC,MAAOF,EAAKG,KAAKC,aAAaF,MAC9BG,KAAML,EAAKG,KAAKC,aAAaC,OAE/B,gBAACC,EAAA,EAAD,MACA,gBAACC,EAAA,EAAD,MACA,gBAACb,EAAD,CAASc,GAAG,UAAUP,UAAU,2BAC9B,uBAAKO,GAAG,UAAUP,UAAU,SACzBJ,IAGL,gBAACY,EAAA,EAAD,CAAQP,MAAOF,EAAKG,KAAKC,aAAaF,UAvB5C,U,YCVF,SAASQ,EAAT,GAA2D,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMP,EAAyB,EAAzBA,KAAMQ,EAAmB,EAAnBA,SAAUX,EAAS,EAATA,MAChD,OACE,gBAAC,cAAD,CACEJ,MAAOgB,EACPf,OAAQ,SAAAC,GACN,IAAMe,EACJJ,GAAeX,EAAKG,KAAKC,aAAaO,YACxC,OACE,gBAAC,IAAD,CACEK,eAAgB,CACdJ,QAEFV,MAAOA,EACPe,cAAa,QAAUjB,EAAKG,KAAKC,aAAaF,MAC9CG,KAAM,CACJ,CACEa,KAAM,cACNC,QAASJ,GAEX,CACEK,SAAU,WACVD,QAASjB,GAEX,CACEkB,SAAU,iBACVD,QAASJ,GAEX,CACEK,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASnB,EAAKG,KAAKC,aAAaiB,QAElC,CACEH,KAAM,gBACNC,QAASjB,GAEX,CACEgB,KAAM,sBACNC,QAASJ,IAGVO,OACCT,EAASU,OAAS,EACd,CACEL,KAAM,WACNC,QAASN,EAASW,KAAK,OAEzB,IAELF,OAAOjB,MAtDlB,SA8DJK,EAAIe,aAAe,CACjBb,KAAM,KACNP,KAAM,GACNQ,SAAU,IAWGH,QAETI,EAAe,a,qBChFN,kBAAGY,EAAH,EAAGA,KAAMxB,EAAT,EAASA,MAAT,EAAgByB,KAAhB,EAAsBC,QAAtB,OACb,+BACE,0BACE,gBAAC,IAAD,CACEC,GAAIH,EACJzB,UAAU,gBAETC,MCJM,SAAS4B,EAAT,GAAqC,IAAZC,EAAY,EAApB/B,KAAQ+B,OACtC,OACE,gBAAC,EAAD,KACE,gBAAC,EAAD,CAAK7B,MAAM,SACX,uBAAKD,UAAU,sBACb,2BAASA,UAAU,SACjB,sBAAIA,UAAU,cAAd,mBACC8B,EAAOC,MAAMC,KAAI,YAAuC,QAApCC,KAAQC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,YACnC,OACE,gBAACC,EAAD,CACEC,IAAKH,EAAOI,KACZrC,MAAOkC,EAAYlC,MACnBwB,KAAMS,EAAOI,KACbZ,KAAK,GACLC,QAAQ,WAtBxB,wFAgCO,IAAMY,EAAkB,c","file":"component---src-pages-index-tsx-dfc390d5b9fd22b7a348.js","sourcesContent":["import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport Header from './Header'\nimport Nav from './Nav'\nimport Footer from './Footer'\nimport '../sass/index.scss'\n\nconst Content = styled.div`\n  margin: 0 auto;\n`\n\nexport default ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query LayoutQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className=\"sans-serif page light\">\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={data.site.siteMetadata.meta}\n        />\n        <Header/>\n        <Nav/>\n        <Content id=\"content\" className=\"mw7 pv6-l pv5 ph5-l ph3\">\n          <div id=\"primary\" className=\"w-100\">\n            {children}\n          </div>\n        </Content>\n        <Footer title={data.site.siteMetadata.title}/>\n      </div>\n    )}\n  />\n)","import * as React from 'react'\nimport * as PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import * as React from 'react'\nimport Link from 'gatsby-link'\nimport Styled from 'styled-components'\nimport Img from 'gatsby-image'\n\nexport default ({ path, title, date, excerpt }) => (\n  <article>\n    <h2>\n      <Link\n        to={path}\n        className=\"f4 fw4 black\"\n      >\n        {title}\n      </Link>\n    </h2>\n    {/* <p className=\"lh-copy\" dangerouslySetInnerHTML={{ __html: excerpt }}>\n      \n    </p>\n    <div className=\"dib off-orange\">\n      <Link to={path} className=\"no-underline b off-orange\">more</Link>\n    </div>\n    <div className=\"mt2 gray\">{date}</div> */}\n  </article>\n)","import * as React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Image from '../components/image'\nimport SEO from '../components/seo'\nimport PostItem from '../components/PostItem'\n\nexport default function Index({ data: { allMdx } }) {\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className=\"mw7 pv5 ph3 center\">\n        <section className=\"posts\">\n          <h3 className=\"f4 lh-copy\">Latest Articles</h3>\n          {allMdx.edges.map(({ node: { fields, frontmatter } }) => {\n            return (\n              <PostItem\n                key={fields.slug}\n                title={frontmatter.title}\n                path={fields.slug}\n                date=\"\"\n                excerpt=\"\"\n              />\n            )\n          })}\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const recentPostQuery = graphql`\n  query RecentPostsQuery {\n    allMdx(limit: 5, sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}