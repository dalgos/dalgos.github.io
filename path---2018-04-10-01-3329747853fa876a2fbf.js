webpackJsonp([0x8e9c20880b6a],{334:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>Pattern</h1>\n<p>재사용성을 높이기 위한 패턴으로, 데이터를 관리하는 <code class="language-text">Container Components</code>와 렌더링을 담당하는 <code class="language-text">Prensentation Components</code>로 분리하여 개발하는 패턴입니다. 매우 단순하지만, 유용한 패턴이라는군요.</p>\n<!-- more -->\n<h2>Presentational Components</h2>\n<blockquote>\n<p>Container Components 로 부터 전달받은 데이터를 바탕으로 렌더링을 수행합니다.</p>\n</blockquote>\n<p>TodoList.jsx</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">TodoList</span> <span class="token operator">=</span> props <span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>lists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>list <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>list<span class="token punctuation">.</span>title<span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span>isComplete<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">Presentational Component</code>는 Container로 부터 전달받은 props 를 바탕으로 렌더링만을 담당합니다.</p>\n<h2>Container Components</h2>\n<blockquote>\n<p>Container Components는 데이터를 가져와서(fetching) 해당 하위 구성요소를 렌더링합니다.</p>\n</blockquote>\n<p>Todo.jsx</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">\'./TodoList\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'./api\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list<span class="token punctuation">:</span> json<span class="token punctuation">.</span>list <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoList</span>\n        <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">Container Component</code>(이하 Container)는 데이터를 fetch 하여 state에 할당하고, Presentational Component에 전달합니다. Container Component를 포함할 수 있으며, 다수 Component를 포함할 수 있습니다.</p>\n<p>데이터와 렌더링 영역을 분리함으로써 component의 재사용성을 높이고, 보다 복잡하지 않게 구성이 가능합니다.</p>',frontmatter:{date:"April 10, 2018",path:"/2018-04-10-01",title:"Presentational & Container Component"}}},pathContext:{}}}});
//# sourceMappingURL=path---2018-04-10-01-3329747853fa876a2fbf.js.map