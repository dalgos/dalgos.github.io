{"version":3,"sources":["webpack:///./src/posts/2019-04-10-01/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iCACA,qDAAoC,0BAAYC,WAAW,KAAvB,wBAApC,eAAoH,0BAAYA,WAAW,KAAvB,4BAApH,6CAIA,mDACA,8BACE,iBAAGA,WAAW,cAAd,yDAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,oCADZ,wIAQL,qBAAG,0BAAYA,WAAW,KAAvB,4BAAH,kDACA,8CACA,8BACE,iBAAGA,WAAW,cAAd,kEAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gCADZ,iXAsBL,qBAAG,0BAAYA,WAAW,KAAvB,uBAAH,yIACA,yFAKJJ,EAAWK,gBAAiB","file":"component---src-posts-2019-04-10-01-index-mdx-64a7a6e41a24070f1bb0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/su/Documents/GIT/dalgos.github.io/src/components/PostLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Pattern`}</h1>\n    <p>{`재사용성을 높이기 위한 패턴으로, 데이터를 관리하는 `}<inlineCode parentName=\"p\">{`Container Components`}</inlineCode>{`와 렌더링을 담당하는 `}<inlineCode parentName=\"p\">{`Prensentation Components`}</inlineCode>{`로 분리하여 개발하는 패턴입니다. 매우 단순하지만, 유용한 패턴이라는군요.`}</p>\n    {\n      /* more */\n    }\n    <h2>{`Presentational Components`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Container Components 로 부터 전달받은 데이터를 바탕으로 렌더링을 수행합니다.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx:title=TodoList.jsx\"\n      }}>{`export default TodoList = props =>{\n  return (\n    {props.lists.map(list => <li>{list.title} - {list.isComplete}</li>)}\n  )\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Presentational Component`}</inlineCode>{`는 Container로 부터 전달받은 props 를 바탕으로 렌더링만을 담당합니다.`}</p>\n    <h2>{`Container Components`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Container Components는 데이터를 가져와서(fetching) 해당 하위 구성요소를 렌더링합니다.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx:title=Todo.jsx\"\n      }}>{`import TodoList from './TodoList'\n\nexport default class Todo extends React.Component {\n  state = {\n    list: [],\n  }\n  componentDidMount() {\n    fetch('./api')\n      .then(res => res.json())\n      .then(json => this.setState({ list: json.list }))\n  }\n  render() {\n    return (\n      <TodoList\n        list={this.state.list}\n      />\n    )\n  }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Container Component`}</inlineCode>{`(이하 Container)는 데이터를 fetch 하여 state에 할당하고, Presentational Component에 전달합니다. Container Component를 포함할 수 있으며, 다수 Component를 포함할 수 있습니다.`}</p>\n    <p>{`데이터와 렌더링 영역을 분리함으로써 component의 재사용성을 높이고, 보다 복잡하지 않게 구성이 가능합니다.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}