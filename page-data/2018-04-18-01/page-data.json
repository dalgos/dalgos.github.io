{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2018-04-18-01","webpackCompilationHash":"87def97f8b9b91077054","result":{"data":{"markdownRemark":{"html":"<p>Atom에서는 별도의 uninstall 기능을 제공하고 있지 않아, 아래와 같이 직접 삭제를 해주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf ~/.atom\n<span class=\"token function\">rm</span> -rf /usr/local/bin/atom\n<span class=\"token function\">rm</span> -rf /usr/local/bin/apm\n<span class=\"token function\">rm</span> -rf /Applications/Atom.app\n<span class=\"token function\">rm</span> -rf ~/Library/Preferences/com.github.atom.plist\n<span class=\"token function\">rm</span> -rf ~/<span class=\"token string\">\"Library/Application Support/com.github.atom.ShipIt\"</span>\n<span class=\"token function\">rm</span> -rf ~/<span class=\"token string\">\"Library/Application Support/Atom\"</span>\n<span class=\"token function\">rm</span> -rf ~/<span class=\"token string\">\"Library/Saved Application State/com.github.atom.savedState\"</span>\n<span class=\"token function\">rm</span> -rf ~/Library/Caches/com.github.atom\n<span class=\"token function\">rm</span> -rf ~/Library/Caches/com.github.atom.Shipit\n<span class=\"token function\">rm</span> -rf ~/Library/Caches/Atom</code></pre></div>\n<p>Atom의 이상동작으로 고통받고 계시다면, clean uninstall 후 재설치하셔서 마음의 평화를 찾으시길 바랍니다 :-)</p>\n<p><a href=\"https://discuss.atom.io/t/how-to-completely-uninstall-atom-for-mac/9084/42\">참고링크</a></p>","frontmatter":{"date":"April 18, 2018","path":"/2018-04-18-01","title":"Atom clean uninstall"}},"site":{"siteMetadata":{"description":"Advanced Frontend Engineer"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/04-18-2018-atom-clean-uninstall/","previous":{"excerpt":"Pattern 재사용성을 높이기 위한 패턴으로, 데이터를 관리하는 와 렌더링을 담당하는 로 분리하여 개발하는 패턴입니다. 매우 단순하지만, 유용한 패턴이라는군요. Presentational Components Container Components 로 부터 전달받은 데이터를 바탕으로 렌더링을 수행합니다. TodoList.jsx 는 Container로 부터 전달받은 props 를 바탕으로 렌더링만을 담당합니다. Container Components…","html":"<h1>Pattern</h1>\n<p>재사용성을 높이기 위한 패턴으로, 데이터를 관리하는 <code class=\"language-text\">Container Components</code>와 렌더링을 담당하는 <code class=\"language-text\">Prensentation Components</code>로 분리하여 개발하는 패턴입니다. 매우 단순하지만, 유용한 패턴이라는군요.</p>\n<!-- more -->\n<h2>Presentational Components</h2>\n<blockquote>\n<p>Container Components 로 부터 전달받은 데이터를 바탕으로 렌더링을 수행합니다.</p>\n</blockquote>\n<p>TodoList.jsx</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> - </span><span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Presentational Component</code>는 Container로 부터 전달받은 props 를 바탕으로 렌더링만을 담당합니다.</p>\n<h2>Container Components</h2>\n<blockquote>\n<p>Container Components는 데이터를 가져와서(fetching) 해당 하위 구성요소를 렌더링합니다.</p>\n</blockquote>\n<p>Todo.jsx</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> TodoList <span class=\"token keyword\">from</span> <span class=\"token string\">'./TodoList'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Todo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./api'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> list<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoList</span></span>\n        <span class=\"token attr-name\">list</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Container Component</code>(이하 Container)는 데이터를 fetch 하여 state에 할당하고, Presentational Component에 전달합니다. Container Component를 포함할 수 있으며, 다수 Component를 포함할 수 있습니다.</p>\n<p>데이터와 렌더링 영역을 분리함으로써 component의 재사용성을 높이고, 보다 복잡하지 않게 구성이 가능합니다.</p>","id":"18fbf024-5fb6-58b3-9a7e-ee12dd1c0fcf","fields":{"slug":"/04-10-2018-hi-gatsby/"},"frontmatter":{"date":"2018-04-10T10:00:00.000Z","path":"/2018-04-10-01","title":"Presentational & Container Component"}},"next":{"excerpt":"현재 라이브 동영상을 재생하는 컴포넌트를 관리하고 있습니다. 최근 크롬에서 자동재생이 정상적으로 이뤄지지 않는 이슈가 발생하여 살펴보니, 아래와 같은 이슈가 있었더군요. Chrome Autoplay Policy Changes 음소거(muted) 상태일 경우에는 자동재생이 허용되므로, video 태그의 muted 속성을 추가하기로 합니다. 컴포넌트의 muted 속성은 음소거 버튼을 클릭시 toggle…","html":"<p>현재 라이브 동영상을 재생하는 컴포넌트를 관리하고 있습니다. 최근 크롬에서 자동재생이 정상적으로 이뤄지지 않는 이슈가 발생하여 살펴보니, 아래와 같은 이슈가 있었더군요.</p>\n<p><a href=\"https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\">Chrome Autoplay Policy Changes</a></p>\n<p>음소거(muted) 상태일 경우에는 자동재생이 허용되므로, video 태그의 muted 속성을 추가하기로 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>video\n      muted<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>muted<span class=\"token punctuation\">}</span>\n      autoPlay<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>컴포넌트의 muted 속성은 음소거 버튼을 클릭시 toggle 되도록 작성하였습니다.</p>\n<p>자동재생이 정상적으로 동작하는 것을 확인한 것으로 수정을 종료합니다.</p>","id":"e01a06f5-acbc-5fb6-b1f5-1af058262a05","fields":{"slug":"/06-26-2018-chrome-video-autoplay/"},"frontmatter":{"date":"2018-06-26T10:00:00.000Z","path":"/2018-06-26-01","title":"Chrome Autoplay Policy Changes"}}}}}