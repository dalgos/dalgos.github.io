(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"pvf+":function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return a})),e.d(t,"default",(function(){return l}));e("rGqo"),e("yt8O"),e("Btvt"),e("RW0V"),e("91GP"),e("q1tI");var o=e("7ljp"),s=e("JtHb");var a={},r={_frontmatter:a},i=s.a;function l(n){var t=n.components,e=function(n,t){if(null==n)return{};var e,o,s={},a=Object.keys(n);for(o=0;o<a.length;o++)e=a[o],t.indexOf(e)>=0||(s[e]=n[e]);return s}(n,["components"]);return Object(o.b)(i,Object.assign({},r,e,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",null,"Pattern"),Object(o.b)("p",null,"재사용성을 높이기 위한 패턴으로, 데이터를 관리하는 ",Object(o.b)("inlineCode",{parentName:"p"},"Container Components"),"와 렌더링을 담당하는 ",Object(o.b)("inlineCode",{parentName:"p"},"Prensentation Components"),"로 분리하여 개발하는 패턴입니다. 매우 단순하지만, 유용한 패턴이라는군요."),Object(o.b)("h2",null,"Presentational Components"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Container Components 로 부터 전달받은 데이터를 바탕으로 렌더링을 수행합니다.")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx:title=TodoList.jsx"}),"export default TodoList = props =>{\n  return (\n    {props.lists.map(list => <li>{list.title} - {list.isComplete}</li>)}\n  )\n}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Presentational Component"),"는 Container로 부터 전달받은 props 를 바탕으로 렌더링만을 담당합니다."),Object(o.b)("h2",null,"Container Components"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Container Components는 데이터를 가져와서(fetching) 해당 하위 구성요소를 렌더링합니다.")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx:title=Todo.jsx"}),"import TodoList from './TodoList'\n\nexport default class Todo extends React.Component {\n  state = {\n    list: [],\n  }\n  componentDidMount() {\n    fetch('./api')\n      .then(res => res.json())\n      .then(json => this.setState({ list: json.list }))\n  }\n  render() {\n    return (\n      <TodoList\n        list={this.state.list}\n      />\n    )\n  }\n}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Container Component"),"(이하 Container)는 데이터를 fetch 하여 state에 할당하고, Presentational Component에 전달합니다. Container Component를 포함할 수 있으며, 다수 Component를 포함할 수 있습니다."),Object(o.b)("p",null,"데이터와 렌더링 영역을 분리함으로써 component의 재사용성을 높이고, 보다 복잡하지 않게 구성이 가능합니다."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-posts-2019-04-10-01-index-mdx-64a7a6e41a24070f1bb0.js.map