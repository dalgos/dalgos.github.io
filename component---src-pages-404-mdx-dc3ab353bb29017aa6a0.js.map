{"version":3,"sources":["webpack:///./src/components/SEO.tsx","webpack:///./src/pages/404.mdx"],"names":["SEO","description","lang","meta","keywords","title","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"kYAKA,SAASA,EAAT,GAA2D,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAChD,OACE,gBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJT,GAAeQ,EAAKE,KAAKC,aAAaX,YACxC,OACE,gBAAC,IAAD,CACEY,eAAgB,CACdX,QAEFG,MAAOA,EACPS,cAAa,QAAUL,EAAKE,KAAKC,aAAaP,MAC9CF,KAAM,CACJ,CACEY,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAASX,GAEX,CACEY,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKE,KAAKC,aAAaM,QAElC,CACEH,KAAM,gBACNC,QAASX,GAEX,CACEU,KAAM,sBACNC,QAASN,IAGVS,OACCf,EAASgB,OAAS,EACd,CACEL,KAAM,WACNC,QAASZ,EAASiB,KAAK,OAEzB,IAELF,OAAOhB,MAtDlB,SA8DJH,EAAIsB,aAAe,CACjBpB,KAAM,KACNC,KAAM,GACNC,SAAU,IAWGJ,QAETO,EAAe,a,qFC9Ed,IAAMgB,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,EAAD,CAAKzB,MAAM,gBAAgByB,QAAQ,QACnC,yCAKJH,EAAWI,gBAAiB","file":"component---src-pages-404-mdx-dc3ab353bb29017aa6a0.js","sourcesContent":["import * as React from 'react'\nimport * as PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/su/Documents/GIT/dalgos.github.io/src/components/Layout.tsx\";\nimport SEO from '../components/SEO';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"404 Not Found\" mdxType=\"SEO\" />\n    <h1>{`Page not Found`}</h1>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}