{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1494427846000},{"_id":"source/_posts/Curry.md","hash":"23b9ecd687e92566f422216b9306842363cfc240","modified":1494427846000},{"_id":"source/_posts/omz-auto-command.md","hash":"0ccdbfc742640dff6654b360fa7b3ad7cdea5852","modified":1494431241000},{"_id":"public/sitemap.xml","hash":"b63d6d6dd89cd4e726eea8f411d2edc222328d3d","modified":1494431319349},{"_id":"public/atom.xml","hash":"8720418593cbeae25debce21027e2cac68f30350","modified":1494431319347},{"_id":"public/2017/05/10/omz-auto-command/index.html","hash":"3628a685c36e2c4ac3f1ce2b29ecbad861e2461d","modified":1494431319350},{"_id":"public/2017/05/10/Curry/index.html","hash":"b627c2f49e7a9c2e91334655ebfa2839878896a0","modified":1494431319351},{"_id":"public/archives/index.html","hash":"268b46d13d6f7cc79e872f2accf23e677c8858b5","modified":1494431319351},{"_id":"public/index.html","hash":"b5d55afbc09a19e0917db40e3174d08a0d84292c","modified":1494431319351},{"_id":"themes/apollo/.git","hash":"14cb8d67b270fafd4cdb54ead68534da8a50a353","modified":1494431066000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1494431066000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1494431066000},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1494431066000},{"_id":"themes/apollo/_config.yml","hash":"a90ffe062b4b02865e51c4ed08979e4220ea1770","modified":1494431066000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1494431066000},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1494431066000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1494431066000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1494431066000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1494431066000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1494431066000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1494431066000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1494431066000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1494431066000},{"_id":"themes/apollo/source/CNAME","hash":"1e3252881120594ecfba1a01b16a70f500db042f","modified":1494431066000},{"_id":"themes/apollo/source/favicon.png","hash":"a6ae933ac5c625e4ed9f7f7c5d1f766eefcd15f5","modified":1494431066000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1494431066000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1494431066000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"7547b324ffcb6719600c8fad97d34c9893629f35","modified":1494431066000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1494431066000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1494431066000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1494431066000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1494431066000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1494431066000},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1494431066000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1494431066000},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1494431066000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1494431066000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1494431066000},{"_id":"public/CNAME","hash":"1e3252881120594ecfba1a01b16a70f500db042f","modified":1494431094004},{"_id":"public/favicon.png","hash":"a6ae933ac5c625e4ed9f7f7c5d1f766eefcd15f5","modified":1494431094004},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1494431094004},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1494431094004},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1494431094004},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1494431094007}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"date":"2017-05-10T14:50:46.000Z","updated":"2017-05-10T14:50:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2j3usp5000096km5895q3bu","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Curry","date":"2017-05-10T03:59:48.000Z","_content":"# Curry? Currying?\n\n> **n**개의 매개변수를 참조하는 함수를 하나의 매개변수를 참조하는 **n**개의 함수로 분리, 구현하는 것.\n\n저는 다뤄본 적은 없지만 Haskell, Scala의 기본 요소라고 하는군요. Javascript에는 Currying이 기본 탑재되어 있지 않으므로 기능적 트릭을 이용해 구현해야합니다.\n\n여러개의 매개변수를 참조하는 함수를 하나 만들어봅니다.\n\n```javascript\n\nfunction mixDoms(dom1, dom2) {\n  console.log(dom1 + ' mix ' + dom2);\n}\nmixDoms('<a/>', '<p/>');\n> '<a/> mix <p/>'\n```\n\n두개의 dom을 하나로 붙여주는 함수인데, 간략한 구현을 위해 단순 문자열로 표시했습니다. 위 함수에 두개의 dom 매개변수를 입력하면, 두개의 dom을 mix한 문자열을 출력합니다.\n\n자 이제 첫번째 Currying을 작성합니다.\n\n```\nfunction mixDomCurry(dom1) {\n  return function (dom2) {\n    console.log(dom1 + 'mix' + dom2);\n  }\n}\n```\n\n이제 아래와 같은 형태로 호출이 가능합니다.\n\n```javascript\nvar mixDomWithDom1 = mixDomCurry('<a/>');\nmixDomWithDom1('<p/>');\n> '<a/> mix <p/>'\n```\n\n이런 형태도 가능하죠.\n\n```javascript\nmixDomWithDom1('<a/>')('<p/>');\n```\n\n이제 mix 문자열도 포함하여 Currying으로 만들어봅니다.\n\n```\nvar domHandler = function (method) {\n  return function (dom1) {\n    return function (dom2) {\n      console.log(dom1 + ' ' + method + ' ' + dom2);\n    }\n  }\n}\n```\n\nmixDoms 함수를 curry로 만들었습니다.\n\n```javascript\nvar mixDoms = domHandler('mix');\nvar mixDomsA = mixDoms('<a/>');\nmixDomsA('<p/>');\n> '<a/> mix <p/>'\ndomHandler('mix')('<a/>')('<p/>');\n> '<a/> mix <p/>'\n```\n\n여러개의 매개변수를 하나의 매개변수를 입력받는 여러개의 함수로 재구성함으로써, 사용성을 높일 수 있습니다. curry 함수를 만듭니다.\n\n```javascript\nfunction curry(fnc) {\n  var argLen = fnc.length; //get parameter's length of fnc function.\n  return (function innerFnc() {\n    var argArr = Array.prototype.slice.call(arguments); //arguments => Array\n    return function () {\n      var innerArgArr = argArr.slice(); //Clone argArr{Array}\n      var retFnc;\n      Array.prototype.push.apply(innerArgArr, arguments); //innerArgArr{Array} extend with arguments.\n      retFnc = innerArgArr.length >= argLen ? fnc : innerFnc; //compare innerArgArr.length and argArr.length\n      return retFnc.apply(null, innerArgArr);\n    }\n  }());\n}\n```\n\n이제 curry 함수를 이용해서 함수를 currying 형태로 만들어봅니다.\n\n```javascript\nvar mixDomsCurried = curry(mixDoms);\nmixDomsCurried('<a/>')('<p/>');\n```\n\n-끝-","source":"_posts/Curry.md","raw":"---\ntitle: Curry\ndate: 2017-05-10 12:59:48\ntags:\n---\n# Curry? Currying?\n\n> **n**개의 매개변수를 참조하는 함수를 하나의 매개변수를 참조하는 **n**개의 함수로 분리, 구현하는 것.\n\n저는 다뤄본 적은 없지만 Haskell, Scala의 기본 요소라고 하는군요. Javascript에는 Currying이 기본 탑재되어 있지 않으므로 기능적 트릭을 이용해 구현해야합니다.\n\n여러개의 매개변수를 참조하는 함수를 하나 만들어봅니다.\n\n```javascript\n\nfunction mixDoms(dom1, dom2) {\n  console.log(dom1 + ' mix ' + dom2);\n}\nmixDoms('<a/>', '<p/>');\n> '<a/> mix <p/>'\n```\n\n두개의 dom을 하나로 붙여주는 함수인데, 간략한 구현을 위해 단순 문자열로 표시했습니다. 위 함수에 두개의 dom 매개변수를 입력하면, 두개의 dom을 mix한 문자열을 출력합니다.\n\n자 이제 첫번째 Currying을 작성합니다.\n\n```\nfunction mixDomCurry(dom1) {\n  return function (dom2) {\n    console.log(dom1 + 'mix' + dom2);\n  }\n}\n```\n\n이제 아래와 같은 형태로 호출이 가능합니다.\n\n```javascript\nvar mixDomWithDom1 = mixDomCurry('<a/>');\nmixDomWithDom1('<p/>');\n> '<a/> mix <p/>'\n```\n\n이런 형태도 가능하죠.\n\n```javascript\nmixDomWithDom1('<a/>')('<p/>');\n```\n\n이제 mix 문자열도 포함하여 Currying으로 만들어봅니다.\n\n```\nvar domHandler = function (method) {\n  return function (dom1) {\n    return function (dom2) {\n      console.log(dom1 + ' ' + method + ' ' + dom2);\n    }\n  }\n}\n```\n\nmixDoms 함수를 curry로 만들었습니다.\n\n```javascript\nvar mixDoms = domHandler('mix');\nvar mixDomsA = mixDoms('<a/>');\nmixDomsA('<p/>');\n> '<a/> mix <p/>'\ndomHandler('mix')('<a/>')('<p/>');\n> '<a/> mix <p/>'\n```\n\n여러개의 매개변수를 하나의 매개변수를 입력받는 여러개의 함수로 재구성함으로써, 사용성을 높일 수 있습니다. curry 함수를 만듭니다.\n\n```javascript\nfunction curry(fnc) {\n  var argLen = fnc.length; //get parameter's length of fnc function.\n  return (function innerFnc() {\n    var argArr = Array.prototype.slice.call(arguments); //arguments => Array\n    return function () {\n      var innerArgArr = argArr.slice(); //Clone argArr{Array}\n      var retFnc;\n      Array.prototype.push.apply(innerArgArr, arguments); //innerArgArr{Array} extend with arguments.\n      retFnc = innerArgArr.length >= argLen ? fnc : innerFnc; //compare innerArgArr.length and argArr.length\n      return retFnc.apply(null, innerArgArr);\n    }\n  }());\n}\n```\n\n이제 curry 함수를 이용해서 함수를 currying 형태로 만들어봅니다.\n\n```javascript\nvar mixDomsCurried = curry(mixDoms);\nmixDomsCurried('<a/>')('<p/>');\n```\n\n-끝-","slug":"Curry","published":1,"updated":"2017-05-10T14:50:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2j3uspe000196kmib00ziq9","content":"<h1 id=\"Curry-Currying\"><a href=\"#Curry-Currying\" class=\"headerlink\" title=\"Curry? Currying?\"></a>Curry? Currying?</h1><blockquote>\n<p><strong>n</strong>개의 매개변수를 참조하는 함수를 하나의 매개변수를 참조하는 <strong>n</strong>개의 함수로 분리, 구현하는 것.</p>\n</blockquote>\n<p>저는 다뤄본 적은 없지만 Haskell, Scala의 기본 요소라고 하는군요. Javascript에는 Currying이 기본 탑재되어 있지 않으므로 기능적 트릭을 이용해 구현해야합니다.</p>\n<p>여러개의 매개변수를 참조하는 함수를 하나 만들어봅니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixDoms</span>(<span class=\"params\">dom1, dom2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(dom1 + <span class=\"string\">' mix '</span> + dom2);</div><div class=\"line\">&#125;</div><div class=\"line\">mixDoms(<span class=\"string\">'&lt;a/&gt;'</span>, <span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>두개의 dom을 하나로 붙여주는 함수인데, 간략한 구현을 위해 단순 문자열로 표시했습니다. 위 함수에 두개의 dom 매개변수를 입력하면, 두개의 dom을 mix한 문자열을 출력합니다.</p>\n<p>자 이제 첫번째 Currying을 작성합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function mixDomCurry(dom1) &#123;</div><div class=\"line\">  return function (dom2) &#123;</div><div class=\"line\">    console.log(dom1 + &apos;mix&apos; + dom2);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 아래와 같은 형태로 호출이 가능합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDomWithDom1 = mixDomCurry(<span class=\"string\">'&lt;a/&gt;'</span>);</div><div class=\"line\">mixDomWithDom1(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>이런 형태도 가능하죠.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mixDomWithDom1(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>\n<p>이제 mix 문자열도 포함하여 Currying으로 만들어봅니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domHandler = function (method) &#123;</div><div class=\"line\">  return function (dom1) &#123;</div><div class=\"line\">    return function (dom2) &#123;</div><div class=\"line\">      console.log(dom1 + &apos; &apos; + method + &apos; &apos; + dom2);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mixDoms 함수를 curry로 만들었습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDoms = domHandler(<span class=\"string\">'mix'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mixDomsA = mixDoms(<span class=\"string\">'&lt;a/&gt;'</span>);</div><div class=\"line\">mixDomsA(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div><div class=\"line\">domHandler(<span class=\"string\">'mix'</span>)(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>여러개의 매개변수를 하나의 매개변수를 입력받는 여러개의 함수로 재구성함으로써, 사용성을 높일 수 있습니다. curry 함수를 만듭니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fnc</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> argLen = fnc.length; <span class=\"comment\">//get parameter's length of fnc function.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFnc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> argArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//arguments =&gt; Array</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> innerArgArr = argArr.slice(); <span class=\"comment\">//Clone argArr&#123;Array&#125;</span></div><div class=\"line\">      <span class=\"keyword\">var</span> retFnc;</div><div class=\"line\">      <span class=\"built_in\">Array</span>.prototype.push.apply(innerArgArr, <span class=\"built_in\">arguments</span>); <span class=\"comment\">//innerArgArr&#123;Array&#125; extend with arguments.</span></div><div class=\"line\">      retFnc = innerArgArr.length &gt;= argLen ? fnc : innerFnc; <span class=\"comment\">//compare innerArgArr.length and argArr.length</span></div><div class=\"line\">      <span class=\"keyword\">return</span> retFnc.apply(<span class=\"literal\">null</span>, innerArgArr);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 curry 함수를 이용해서 함수를 currying 형태로 만들어봅니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDomsCurried = curry(mixDoms);</div><div class=\"line\">mixDomsCurried(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>\n<p>-끝-</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Curry-Currying\"><a href=\"#Curry-Currying\" class=\"headerlink\" title=\"Curry? Currying?\"></a>Curry? Currying?</h1><blockquote>\n<p><strong>n</strong>개의 매개변수를 참조하는 함수를 하나의 매개변수를 참조하는 <strong>n</strong>개의 함수로 분리, 구현하는 것.</p>\n</blockquote>\n<p>저는 다뤄본 적은 없지만 Haskell, Scala의 기본 요소라고 하는군요. Javascript에는 Currying이 기본 탑재되어 있지 않으므로 기능적 트릭을 이용해 구현해야합니다.</p>\n<p>여러개의 매개변수를 참조하는 함수를 하나 만들어봅니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixDoms</span>(<span class=\"params\">dom1, dom2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(dom1 + <span class=\"string\">' mix '</span> + dom2);</div><div class=\"line\">&#125;</div><div class=\"line\">mixDoms(<span class=\"string\">'&lt;a/&gt;'</span>, <span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>두개의 dom을 하나로 붙여주는 함수인데, 간략한 구현을 위해 단순 문자열로 표시했습니다. 위 함수에 두개의 dom 매개변수를 입력하면, 두개의 dom을 mix한 문자열을 출력합니다.</p>\n<p>자 이제 첫번째 Currying을 작성합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function mixDomCurry(dom1) &#123;</div><div class=\"line\">  return function (dom2) &#123;</div><div class=\"line\">    console.log(dom1 + &apos;mix&apos; + dom2);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 아래와 같은 형태로 호출이 가능합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDomWithDom1 = mixDomCurry(<span class=\"string\">'&lt;a/&gt;'</span>);</div><div class=\"line\">mixDomWithDom1(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>이런 형태도 가능하죠.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mixDomWithDom1(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>\n<p>이제 mix 문자열도 포함하여 Currying으로 만들어봅니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domHandler = function (method) &#123;</div><div class=\"line\">  return function (dom1) &#123;</div><div class=\"line\">    return function (dom2) &#123;</div><div class=\"line\">      console.log(dom1 + &apos; &apos; + method + &apos; &apos; + dom2);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mixDoms 함수를 curry로 만들었습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDoms = domHandler(<span class=\"string\">'mix'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mixDomsA = mixDoms(<span class=\"string\">'&lt;a/&gt;'</span>);</div><div class=\"line\">mixDomsA(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div><div class=\"line\">domHandler(<span class=\"string\">'mix'</span>)(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div><div class=\"line\">&gt; <span class=\"string\">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>\n<p>여러개의 매개변수를 하나의 매개변수를 입력받는 여러개의 함수로 재구성함으로써, 사용성을 높일 수 있습니다. curry 함수를 만듭니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fnc</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> argLen = fnc.length; <span class=\"comment\">//get parameter's length of fnc function.</span></div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFnc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> argArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//arguments =&gt; Array</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> innerArgArr = argArr.slice(); <span class=\"comment\">//Clone argArr&#123;Array&#125;</span></div><div class=\"line\">      <span class=\"keyword\">var</span> retFnc;</div><div class=\"line\">      <span class=\"built_in\">Array</span>.prototype.push.apply(innerArgArr, <span class=\"built_in\">arguments</span>); <span class=\"comment\">//innerArgArr&#123;Array&#125; extend with arguments.</span></div><div class=\"line\">      retFnc = innerArgArr.length &gt;= argLen ? fnc : innerFnc; <span class=\"comment\">//compare innerArgArr.length and argArr.length</span></div><div class=\"line\">      <span class=\"keyword\">return</span> retFnc.apply(<span class=\"literal\">null</span>, innerArgArr);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 curry 함수를 이용해서 함수를 currying 형태로 만들어봅니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixDomsCurried = curry(mixDoms);</div><div class=\"line\">mixDomsCurried(<span class=\"string\">'&lt;a/&gt;'</span>)(<span class=\"string\">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>\n<p>-끝-</p>\n"},{"title":"oh-my-zsh 커맨드 자동완성 플러그인 설치하기","date":"2017-05-10T05:37:00.000Z","desc":"팀 내 주력 shell 로 **zsh**을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 **auto suggestions**을 지원해주는 **zsh-autosuggestions** 입니다.","_content":"\n팀 내 주력 shell 로 **zsh**을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 **auto suggestions**을 지원해주는 **zsh-autosuggestions** 입니다.\n\n이 플러그인은 자주 사용하는 커맨드를 추천 및 제시해주어 반복되는 불필요한 입력을 최소화하는데 도움을 줍니다.\n\n[git@zsh-autosuggestion](https://github.com/zsh-users/zsh-autosuggestions)\n\nzsh 기본 사용시 설치방법은 위 저장소에 잘 설명되어 있으므로, 여기서는 oh-my-zsh를 사용하는 경우에 대한 설치 방법만 설명합니다.\n\n일단 해당 플러그인을 clone 합니다. 설치 폴더는 oh-my-zsh의 plugins 폴더를 사용하겠습니다.\n```bash\n$ git clone git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions\n```\n\n이제 플러그인을 사용하도록 .zshrc 파일을 편집합니다. ($ZSH는 ~/.oh-my-zsh 를 바라봅니다.)\n```bash\nsource=(zsh-autosuggestions)\n```\n\n이제 편집한 내용을 적용합니다.\n```bash\nsource ~/.zshrc\n```\n\n이제 커맨드 작성시 기존에 사용했던 커맨드가 자동완성되어 추천되어 나옵니다. 자주 사용하는 커맨드를 매번 입력하는 수고로움을 극복할 수 있게 되었습니다. :-)\n\n```bash\ncd ~/Document/GIT/\n```\n\n삭제하실 때는 .zshrc 에서 추가했던 플러그인 적용 내용을 삭제하고, plugins 폴더의 zsh-autosuggestions 폴더를 삭제하시면 됩니다.\n\n끝.\n\n본 글은 [wavejs](http://blog.wavejs.io/zshe-keomaendeu-jadongwanseong-peulreogeuin-seolcihagi/) 그룹에도 포스팅되었습니다.\n","source":"_posts/omz-auto-command.md","raw":"---\ntitle: oh-my-zsh 커맨드 자동완성 플러그인 설치하기\ndate: 2017-05-10 14:37:00\ntags:\ndesc: 팀 내 주력 shell 로 **zsh**을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 **auto suggestions**을 지원해주는 **zsh-autosuggestions** 입니다.\n---\n\n팀 내 주력 shell 로 **zsh**을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 **auto suggestions**을 지원해주는 **zsh-autosuggestions** 입니다.\n\n이 플러그인은 자주 사용하는 커맨드를 추천 및 제시해주어 반복되는 불필요한 입력을 최소화하는데 도움을 줍니다.\n\n[git@zsh-autosuggestion](https://github.com/zsh-users/zsh-autosuggestions)\n\nzsh 기본 사용시 설치방법은 위 저장소에 잘 설명되어 있으므로, 여기서는 oh-my-zsh를 사용하는 경우에 대한 설치 방법만 설명합니다.\n\n일단 해당 플러그인을 clone 합니다. 설치 폴더는 oh-my-zsh의 plugins 폴더를 사용하겠습니다.\n```bash\n$ git clone git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions\n```\n\n이제 플러그인을 사용하도록 .zshrc 파일을 편집합니다. ($ZSH는 ~/.oh-my-zsh 를 바라봅니다.)\n```bash\nsource=(zsh-autosuggestions)\n```\n\n이제 편집한 내용을 적용합니다.\n```bash\nsource ~/.zshrc\n```\n\n이제 커맨드 작성시 기존에 사용했던 커맨드가 자동완성되어 추천되어 나옵니다. 자주 사용하는 커맨드를 매번 입력하는 수고로움을 극복할 수 있게 되었습니다. :-)\n\n```bash\ncd ~/Document/GIT/\n```\n\n삭제하실 때는 .zshrc 에서 추가했던 플러그인 적용 내용을 삭제하고, plugins 폴더의 zsh-autosuggestions 폴더를 삭제하시면 됩니다.\n\n끝.\n\n본 글은 [wavejs](http://blog.wavejs.io/zshe-keomaendeu-jadongwanseong-peulreogeuin-seolcihagi/) 그룹에도 포스팅되었습니다.\n","slug":"omz-auto-command","published":1,"updated":"2017-05-10T15:47:21.000Z","_id":"cj2j3uspn000296kmw94p2l54","comments":1,"layout":"post","photos":[],"link":"","content":"<p>팀 내 주력 shell 로 <strong>zsh</strong>을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 <strong>auto suggestions</strong>을 지원해주는 <strong>zsh-autosuggestions</strong> 입니다.</p>\n<p>이 플러그인은 자주 사용하는 커맨드를 추천 및 제시해주어 반복되는 불필요한 입력을 최소화하는데 도움을 줍니다.</p>\n<p><a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"external\">git@zsh-autosuggestion</a></p>\n<p>zsh 기본 사용시 설치방법은 위 저장소에 잘 설명되어 있으므로, 여기서는 oh-my-zsh를 사용하는 경우에 대한 설치 방법만 설명합니다.</p>\n<p>일단 해당 플러그인을 clone 합니다. 설치 폴더는 oh-my-zsh의 plugins 폴더를 사용하겠습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</div></pre></td></tr></table></figure></p>\n<p>이제 플러그인을 사용하도록 .zshrc 파일을 편집합니다. ($ZSH는 ~/.oh-my-zsh 를 바라봅니다.)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span>=(zsh-autosuggestions)</div></pre></td></tr></table></figure></p>\n<p>이제 편집한 내용을 적용합니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>\n<p>이제 커맨드 작성시 기존에 사용했던 커맨드가 자동완성되어 추천되어 나옵니다. 자주 사용하는 커맨드를 매번 입력하는 수고로움을 극복할 수 있게 되었습니다. :-)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/Document/GIT/</div></pre></td></tr></table></figure>\n<p>삭제하실 때는 .zshrc 에서 추가했던 플러그인 적용 내용을 삭제하고, plugins 폴더의 zsh-autosuggestions 폴더를 삭제하시면 됩니다.</p>\n<p>끝.</p>\n<p>본 글은 <a href=\"http://blog.wavejs.io/zshe-keomaendeu-jadongwanseong-peulreogeuin-seolcihagi/\" target=\"_blank\" rel=\"external\">wavejs</a> 그룹에도 포스팅되었습니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>팀 내 주력 shell 로 <strong>zsh</strong>을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 <strong>auto suggestions</strong>을 지원해주는 <strong>zsh-autosuggestions</strong> 입니다.</p>\n<p>이 플러그인은 자주 사용하는 커맨드를 추천 및 제시해주어 반복되는 불필요한 입력을 최소화하는데 도움을 줍니다.</p>\n<p><a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"external\">git@zsh-autosuggestion</a></p>\n<p>zsh 기본 사용시 설치방법은 위 저장소에 잘 설명되어 있으므로, 여기서는 oh-my-zsh를 사용하는 경우에 대한 설치 방법만 설명합니다.</p>\n<p>일단 해당 플러그인을 clone 합니다. 설치 폴더는 oh-my-zsh의 plugins 폴더를 사용하겠습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</div></pre></td></tr></table></figure></p>\n<p>이제 플러그인을 사용하도록 .zshrc 파일을 편집합니다. ($ZSH는 ~/.oh-my-zsh 를 바라봅니다.)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span>=(zsh-autosuggestions)</div></pre></td></tr></table></figure></p>\n<p>이제 편집한 내용을 적용합니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>\n<p>이제 커맨드 작성시 기존에 사용했던 커맨드가 자동완성되어 추천되어 나옵니다. 자주 사용하는 커맨드를 매번 입력하는 수고로움을 극복할 수 있게 되었습니다. :-)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/Document/GIT/</div></pre></td></tr></table></figure>\n<p>삭제하실 때는 .zshrc 에서 추가했던 플러그인 적용 내용을 삭제하고, plugins 폴더의 zsh-autosuggestions 폴더를 삭제하시면 됩니다.</p>\n<p>끝.</p>\n<p>본 글은 <a href=\"http://blog.wavejs.io/zshe-keomaendeu-jadongwanseong-peulreogeuin-seolcihagi/\" target=\"_blank\" rel=\"external\">wavejs</a> 그룹에도 포스팅되었습니다.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}