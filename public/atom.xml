<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bbss.me</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bbss.me/"/>
  <updated>2017-05-10T15:47:21.000Z</updated>
  <id>http://bbss.me/</id>
  
  <author>
    <name>dalgos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oh-my-zsh 커맨드 자동완성 플러그인 설치하기</title>
    <link href="http://bbss.me/2017/05/10/omz-auto-command/"/>
    <id>http://bbss.me/2017/05/10/omz-auto-command/</id>
    <published>2017-05-10T05:37:00.000Z</published>
    <updated>2017-05-10T15:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>팀 내 주력 shell 로 <strong>zsh</strong>을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한 플러그인은 <strong>auto suggestions</strong>을 지원해주는 <strong>zsh-autosuggestions</strong> 입니다.</p>
<p>이 플러그인은 자주 사용하는 커맨드를 추천 및 제시해주어 반복되는 불필요한 입력을 최소화하는데 도움을 줍니다.</p>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">git@zsh-autosuggestion</a></p>
<p>zsh 기본 사용시 설치방법은 위 저장소에 잘 설명되어 있으므로, 여기서는 oh-my-zsh를 사용하는 경우에 대한 설치 방법만 설명합니다.</p>
<p>일단 해당 플러그인을 clone 합니다. 설치 폴더는 oh-my-zsh의 plugins 폴더를 사용하겠습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</div></pre></td></tr></table></figure></p>
<p>이제 플러그인을 사용하도록 .zshrc 파일을 편집합니다. ($ZSH는 ~/.oh-my-zsh 를 바라봅니다.)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span>=(zsh-autosuggestions)</div></pre></td></tr></table></figure></p>
<p>이제 편집한 내용을 적용합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>이제 커맨드 작성시 기존에 사용했던 커맨드가 자동완성되어 추천되어 나옵니다. 자주 사용하는 커맨드를 매번 입력하는 수고로움을 극복할 수 있게 되었습니다. :-)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Document/GIT/</div></pre></td></tr></table></figure>
<p>삭제하실 때는 .zshrc 에서 추가했던 플러그인 적용 내용을 삭제하고, plugins 폴더의 zsh-autosuggestions 폴더를 삭제하시면 됩니다.</p>
<p>끝.</p>
<p>본 글은 <a href="http://blog.wavejs.io/zshe-keomaendeu-jadongwanseong-peulreogeuin-seolcihagi/" target="_blank" rel="external">wavejs</a> 그룹에도 포스팅되었습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;팀 내 주력 shell 로 &lt;strong&gt;zsh&lt;/strong&gt;을 사용중입니다. 포함되어 있는 기본기능들이 충실하고, 속도 저하등도 아직까지는 체감하지 못하고 있습니다. 기본기가 충실한 zsh임에도 유용한 플러그인들이 제법 많은데, 이번에 설치한
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Curry</title>
    <link href="http://bbss.me/2017/05/10/Curry/"/>
    <id>http://bbss.me/2017/05/10/Curry/</id>
    <published>2017-05-10T03:59:48.000Z</published>
    <updated>2017-05-10T14:50:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Curry-Currying"><a href="#Curry-Currying" class="headerlink" title="Curry? Currying?"></a>Curry? Currying?</h1><blockquote>
<p><strong>n</strong>개의 매개변수를 참조하는 함수를 하나의 매개변수를 참조하는 <strong>n</strong>개의 함수로 분리, 구현하는 것.</p>
</blockquote>
<p>저는 다뤄본 적은 없지만 Haskell, Scala의 기본 요소라고 하는군요. Javascript에는 Currying이 기본 탑재되어 있지 않으므로 기능적 트릭을 이용해 구현해야합니다.</p>
<p>여러개의 매개변수를 참조하는 함수를 하나 만들어봅니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixDoms</span>(<span class="params">dom1, dom2</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(dom1 + <span class="string">' mix '</span> + dom2);</div><div class="line">&#125;</div><div class="line">mixDoms(<span class="string">'&lt;a/&gt;'</span>, <span class="string">'&lt;p/&gt;'</span>);</div><div class="line">&gt; <span class="string">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>
<p>두개의 dom을 하나로 붙여주는 함수인데, 간략한 구현을 위해 단순 문자열로 표시했습니다. 위 함수에 두개의 dom 매개변수를 입력하면, 두개의 dom을 mix한 문자열을 출력합니다.</p>
<p>자 이제 첫번째 Currying을 작성합니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function mixDomCurry(dom1) &#123;</div><div class="line">  return function (dom2) &#123;</div><div class="line">    console.log(dom1 + &apos;mix&apos; + dom2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이제 아래와 같은 형태로 호출이 가능합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixDomWithDom1 = mixDomCurry(<span class="string">'&lt;a/&gt;'</span>);</div><div class="line">mixDomWithDom1(<span class="string">'&lt;p/&gt;'</span>);</div><div class="line">&gt; <span class="string">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>
<p>이런 형태도 가능하죠.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixDomWithDom1(<span class="string">'&lt;a/&gt;'</span>)(<span class="string">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>
<p>이제 mix 문자열도 포함하여 Currying으로 만들어봅니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var domHandler = function (method) &#123;</div><div class="line">  return function (dom1) &#123;</div><div class="line">    return function (dom2) &#123;</div><div class="line">      console.log(dom1 + &apos; &apos; + method + &apos; &apos; + dom2);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mixDoms 함수를 curry로 만들었습니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixDoms = domHandler(<span class="string">'mix'</span>);</div><div class="line"><span class="keyword">var</span> mixDomsA = mixDoms(<span class="string">'&lt;a/&gt;'</span>);</div><div class="line">mixDomsA(<span class="string">'&lt;p/&gt;'</span>);</div><div class="line">&gt; <span class="string">'&lt;a/&gt; mix &lt;p/&gt;'</span></div><div class="line">domHandler(<span class="string">'mix'</span>)(<span class="string">'&lt;a/&gt;'</span>)(<span class="string">'&lt;p/&gt;'</span>);</div><div class="line">&gt; <span class="string">'&lt;a/&gt; mix &lt;p/&gt;'</span></div></pre></td></tr></table></figure>
<p>여러개의 매개변수를 하나의 매개변수를 입력받는 여러개의 함수로 재구성함으로써, 사용성을 높일 수 있습니다. curry 함수를 만듭니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fnc</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> argLen = fnc.length; <span class="comment">//get parameter's length of fnc function.</span></div><div class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">innerFnc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> argArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">//arguments =&gt; Array</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> innerArgArr = argArr.slice(); <span class="comment">//Clone argArr&#123;Array&#125;</span></div><div class="line">      <span class="keyword">var</span> retFnc;</div><div class="line">      <span class="built_in">Array</span>.prototype.push.apply(innerArgArr, <span class="built_in">arguments</span>); <span class="comment">//innerArgArr&#123;Array&#125; extend with arguments.</span></div><div class="line">      retFnc = innerArgArr.length &gt;= argLen ? fnc : innerFnc; <span class="comment">//compare innerArgArr.length and argArr.length</span></div><div class="line">      <span class="keyword">return</span> retFnc.apply(<span class="literal">null</span>, innerArgArr);</div><div class="line">    &#125;</div><div class="line">  &#125;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이제 curry 함수를 이용해서 함수를 currying 형태로 만들어봅니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixDomsCurried = curry(mixDoms);</div><div class="line">mixDomsCurried(<span class="string">'&lt;a/&gt;'</span>)(<span class="string">'&lt;p/&gt;'</span>);</div></pre></td></tr></table></figure>
<p>-끝-</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Curry-Currying&quot;&gt;&lt;a href=&quot;#Curry-Currying&quot; class=&quot;headerlink&quot; title=&quot;Curry? Currying?&quot;&gt;&lt;/a&gt;Curry? Currying?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;stro
    
    </summary>
    
    
  </entry>
  
</feed>
