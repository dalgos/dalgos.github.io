{"version":3,"sources":["webpack:///./src/posts/2020-02-26-01/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,6CACA,sDACA,qBAAG,+BAAGC,WAAW,KAAQ,CACrB,KAAQ,8CADT,qBAGH,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,oDAGL,iDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,iDAEL,sDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,8DAKL,qBAAG,iCAAKA,WAAW,KAAQ,CACvB,IAAO,cACP,IAAO,kBAEX,qDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,qDAEL,iDACA,iEACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,wLASL,qCAAoB,0BAAYA,WAAW,KAAvB,MAApB,eACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,uBAEL,qEACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,iJAOL,0CACA,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,0EADT,UAEa,0BAAYA,WAAW,KAAvB,2BAFb,qBAOPJ,EAAWK,gBAAiB","file":"component---src-posts-2020-02-26-01-index-mdx-a23d4a4c1a36c8a124e5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/su/Documents/GIT/dalgos.github.io/src/components/PostLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`github GPG key 등록하기`}</h1>\n    <p>{`Install GPG command line tool`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.gnupg.org/download/index.html\"\n      }}>{`GnuPG - Download`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`brew install gpg\nbrew cask install gpg-suite\n`}</code></pre>\n    <p>{`기존에 생성된 GPG키가 있는지 조회합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gpg --list-secret-keys --keyid-format LONG\n`}</code></pre>\n    <p>{`키가 없는 것을 확인했다면, GPG 키를 생성합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gpg --full-generate-key\n\n1. RSA and DSA\n2. 4096 bits\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"./cover.png\",\n        \"alt\": \"./cover.png\"\n      }}></img></p>\n    <p>{`rsa4096/ 뒤쪽의 문자열이 gpg key id`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gpg --armor --export BADFDEDCBA855CD1 | pbcopy\n`}</code></pre>\n    <p>{`복사된 키를 github 계정에 추가합니다.`}</p>\n    <p>{`Signing Commit 사용을 위해 git config를 추가합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// local git\ngit config commit.gpgsign true\n\n// global git\ngit config --global commit.gpgsign true\n\n// signingkey 를 추가합니다.\ngit config --global user.siginingkey 0x{key-id}\n`}</code></pre>\n    <p>{`git commit 시 `}<inlineCode parentName=\"p\">{`-S`}</inlineCode>{` 옵션을 추가합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`git commit -S -v\n`}</code></pre>\n    <p>{`commit 시 gpg 서명 실패 오류가 발생하는 경우 아래와 같이 조치합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// signingkey 추가\ngit config --global user.signingkey 0x{key-id}\n\ngit config --global gpg.program gpg2\n\necho \"test\" | gpg2 --clearsign\n`}</code></pre>\n    <p>{`아래는 참고할 만한 링크입니다.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/cezaraugusto/2c91d141ddec026753051ffcace3f1f2\"\n      }}>{`fixing `}<inlineCode parentName=\"a\">{`gpg failed to sign data`}</inlineCode>{` error on macOS`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}